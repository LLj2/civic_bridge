let currentRepresentatives = null;
let currentLocation = null;
let currentThemes = [];
let selectedRep = null;
let selectedInstitution = null;
window.setRepresentatives = function(reps) {
 currentRepresentatives = reps;
}
window.getRepresentatives = function() {
 return currentRepresentatives;
}
window.setLocation = function(location) {
 currentLocation = location;
}
window.getLocation = function() {
 return currentLocation;
}
window.setThemes = function(themes) {
 currentThemes = themes;
}
window.getThemes = function() {
 return currentThemes;
}
window.setSelectedRep = function(rep, institution) {
 selectedRep = rep;
 selectedInstitution = institution;
}
window.getSelectedRep = function() {
 return selectedRep;
}
window.getSelectedInstitution = function() {
 return selectedInstitution;
}
window.clearSelectedRep = function() {
 selectedRep = null;
 selectedInstitution = null;
}
let selectedComune = '';
window.setupAutocomplete = function() {
 const input = document.getElementById('searchInput');
 const list = document.getElementById('autocompleteList');
 if (!input || !list) {
 console.error('Autocomplete elements not found!');
 return;
 }
 const debouncedAutocomplete = debounce(fetchAutocomplete, 300);
 input.addEventListener('input', function() {
 const query = this.value.trim();
 if (query.length < 2) {
 hideAutocomplete();
 return;
 }
 debouncedAutocomplete(query);
 });
 input.addEventListener('blur', function() {
 setTimeout(() => hideAutocomplete(), 200);
 });
 input.addEventListener('focus', function() {
 if (this.value.length >= 2) {
 debouncedAutocomplete(this.value.trim());
 }
 });
 input.addEventListener('keypress', function(e) {
 if (e.key === 'Enter') {
 hideAutocomplete();
 searchRepresentatives();
 }
 });
}
async function fetchAutocomplete(query) {
 try {
 const data = await autocomplete(query);
 if (data.success && data.results.length > 0) {
 showAutocompleteResults(data.results);
 } else {
 hideAutocomplete();
 }
 } catch (error) {
 console.error('Autocomplete error:', error);
 hideAutocomplete();
 }
}
function showAutocompleteResults(results) {
 const list = document.getElementById('autocompleteList');
 list.innerHTML = '';
 results.forEach(result => {
 const item = document.createElement('div');
 item.className = 'autocomplete-item';
 item.textContent = result.display;
 item.addEventListener('click', function() {
 document.getElementById('searchInput').value = result.comune;
 selectedComune = result.comune;
 hideAutocomplete();
 searchRepresentatives();
 });
 list.appendChild(item);
 });
 list.style.display = 'block';
}
function hideAutocomplete() {
 const list = document.getElementById('autocompleteList');
 if (list) {
 list.style.display = 'none';
 }
}
export async function searchRepresentatives() {
 const query = document.getElementById('searchInput').value.trim();
 if (!query) {
 showNotification('Inserisci il nome di un comune', 'error');
 return;
 }
 const resultsDiv = document.getElementById('results');
 const contentDiv = document.getElementById('resultsContent');
 resultsDiv.style.display = 'block';
 contentDiv.innerHTML = '<div class="loading">Ricerca in corso...</div>';
 try {
 const data = await lookup(query);
 if (data.success) {
 setRepresentatives(data.representatives);
 setLocation(data.location);
 displayResults(data);
 } else {
 contentDiv.innerHTML = `<div class="error">Errore: ${data.error}</div>`;
 }
 } catch (error) {
 console.error('Search error:', error);
 contentDiv.innerHTML = `<div class="error">Errore di connessione: ${error.message}</div>`;
 }
}
window.openComposer = function(repIndex, institution) {
 const representatives = getRepresentatives();
 const institutionMap = { 
 camera: 'camera', 
 senato: 'senato', 
 eu: 'eu_parliament' 
 };
 const listKey = institutionMap[institution] || institution;
 const rep = (representatives && representatives[listKey]) 
 ? representatives[listKey][repIndex] 
 : null;
 if (!rep) {
 console.error('Representative not found for', institution, repIndex);
 showNotification('Impossibile aprire il compositore: rappresentante non trovato.', 'error');
 return;
 }
 setSelectedRep(rep, institution);
 updateModalHeader(rep, institution);
 populateThemeDropdown();
 resetForm();
 const modal = document.getElementById('composerModal');
 modal.classList.add('show');
 document.getElementById('themeSelect').focus();
}
window.closeComposer = function() {
 const modal = document.getElementById('composerModal');
 modal.classList.remove('show');
 clearSelectedRep();
 resetForm();
}
function updateModalHeader(rep, institution) {
 const roleMap = { 
 camera: 'Deputato', 
 senato: 'Senatore', 
 eu: 'MEP' 
 };
 const role = roleMap[institution];
 const partyCode = getPartyCode(rep.gruppo_partito);
 document.getElementById('composerTitle').textContent = 
 `Scrivi a ${role} ${rep.nome} ${rep.cognome}`;
 let locationInfo = '';
 if (institution === 'camera') {
 locationInfo = `Collegio: ${rep.collegio}`;
 } else if (institution === 'senato') {
 locationInfo = `Regione: ${rep.regione}`;
 } else {
 locationInfo = `Circoscrizione: ${rep.circoscrizione_eu}`;
 }
 document.getElementById('composerSubtitle').textContent = 
 `${locationInfo} Â· Partito: ${partyCode}`;
}
function populateThemeDropdown() {
 const selectElement = document.getElementById('themeSelect');
 populateThemes(selectElement);
}
window.onThemeChange = function() {
 const themeId = document.getElementById('themeSelect').value;
 if (!themeId) {
 clearMessageFields();
 return;
 }
 const template = getTemplate(themeId);
 if (!template) {
 clearMessageFields();
 return;
 }
 const subject = replaceTokens(template.subject);
 const body = replaceTokens(template.body);
 document.getElementById('subjectInput').value = subject;
 document.getElementById('bodyTextarea').value = body;
 validateForm();
}
function clearMessageFields() {
 document.getElementById('subjectInput').value = '';
 document.getElementById('bodyTextarea').value = '';
 validateForm();
}
function resetForm() {
 document.getElementById('themeSelect').value = '';
 document.getElementById('subjectInput').value = '';
 document.getElementById('bodyTextarea').value = '';
 document.getElementById('personalLine').value = '';
 document.getElementById('sendMailto').checked = true;
 updateCharCounter();
 validateForm();
}
function updateCharCounter() {
 const textarea = document.getElementById('personalLine');
 const counter = document.getElementById('personalCounter');
 const length = textarea.value.length;
 const maxLength = 300;
 counter.textContent = `${length} / ${maxLength} caratteri`;
 if (length > maxLength * 0.9) {
 counter.className = 'char-counter warning';
 } else if (length > maxLength) {
 counter.className = 'char-counter error';
 } else {
 counter.className = 'char-counter';
 }
}
function validateForm() {
 const theme = document.getElementById('themeSelect').value;
 const subject = document.getElementById('subjectInput').value.trim();
 const personalLine = document.getElementById('personalLine').value.trim();
 const sendButton = document.getElementById('sendButton');
 const isValid = theme && subject && personalLine.length >= 20;
 sendButton.disabled = !isValid;
 sendButton.textContent = isValid ? 'Invia' : 'Compila tutti i campi';
}
window.sendMessage = function() {
 const sendMethod = document.querySelector('input[name="sendMethod"]:checked').value;
 const subject = document.getElementById('subjectInput').value;
 const body = document.getElementById('bodyTextarea').value;
 const personalLine = document.getElementById('personalLine').value;
 const finalBody = body.replace(/\\[RIGA PERSONALE OBBLIGATORIA[^\\]]*\\]/g, personalLine);
 if (sendMethod === 'mailto') {
 openMailClient(subject, finalBody);
 } else {
 sendViaOAuth(subject, finalBody);
 }
}
function openMailClient(subject, body) {
 const selectedRep = getSelectedRep();
 if (!selectedRep || !selectedRep.email || selectedRep.email === 'Non disponibile') {
 showNotification('Email non disponibile per questo rappresentante.', 'error');
 return;
 }
 const mailto = `mailto:${encodeURIComponent(selectedRep.email)}` +
 `?subject=${encodeURIComponent(subject)}` +
 `&body=${encodeURIComponent(body)}`;
 try {
 window.open(mailto, '_blank');
 showSuccessMessage();
 } catch (error) {
 console.error('Failed to open mail client:', error);
 showCopyFallback(subject, body);
 }
}
function sendViaOAuth(subject, body) {
 showNotification('OAuth implementation coming soon', 'info');
 showSuccessMessage();
}
function showSuccessMessage() {
 const selectedRep = getSelectedRep();
 closeComposer();
 showNotification(`Email preparata per ${selectedRep.nome} ${selectedRep.cognome}`, 'success');
}
function showCopyFallback(subject, body) {
 const text = `Oggetto: ${subject}\\n\\n${body}`;
 if (navigator.clipboard) {
 navigator.clipboard.writeText(text);
 showNotification('Testo copiato negli appunti', 'success');
 } else {
 alert(`Impossibile aprire client email. Copia manualmente:\\n\\n${text}`);
 }
 closeComposer();
}
window.setupComposerListeners = function() {
 document.getElementById('themeSelect').addEventListener('change', onThemeChange);
 const personalLine = document.getElementById('personalLine');
 personalLine.addEventListener('input', function() {
 updateCharCounter();
 validateForm();
 });
 const formFields = ['themeSelect', 'subjectInput', 'personalLine'];
 formFields.forEach(id => {
 const element = document.getElementById(id);
 element.addEventListener('change', validateForm);
 element.addEventListener('input', validateForm);
 });
 document.getElementById('closeComposerBtn').addEventListener('click', closeComposer);
 document.getElementById('sendButton').addEventListener('click', sendMessage);
 document.getElementById('composerModal').addEventListener('click', function(e) {
 if (e.target === this) {
 closeComposer();
 }
 });
 document.addEventListener('keydown', function(e) {
 if (e.key === 'Escape') {
 const modal = document.getElementById('composerModal');
 if (modal.classList.contains('show')) {
 closeComposer();
 }
 }
 });
}
async function initApp() {
 console.log('ð Initializing Civic Bridge...');
 try {
 await loadThemesData();
 setupAutocomplete();
 setupSearchButton();
 setupComposerListeners();
 console.log('â Civic Bridge initialized successfully');
 } catch (error) {
 console.error('â Failed to initialize Civic Bridge:', error);
 showNotification('Errore durante l\'inizializzazione dell\'applicazione', 'error');
 }
}
async function loadThemesData() {
 try {
 const data = await loadThemes();
 setThemes(data.themes || []);
 console.log('ð Themes loaded:', data.themes?.length || 0);
 } catch (error) {
 console.warn('â ï¸ Failed to load themes, using fallback');
 setThemes([
 {
 id: 'corridoio_umanitario',
 title: 'Corridoio umanitario',
 templates: {
 camera: { 
 subject: 'Corridoio umanitario Gaza', 
 body: 'Template di emergenza...' 
 }
 }
 }
 ]);
 }
}
function setupSearchButton() {
 const searchButton = document.getElementById('searchButton');
 if (searchButton) {
 searchButton.addEventListener('click', searchRepresentatives);
 }
}
document.addEventListener('DOMContentLoaded', initApp);